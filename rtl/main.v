////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./main.v
//
// Project:	VideoZip, a ZipCPU SoC supporting video functionality
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	../../../autofpga/trunk/sw/autofpga ../../../autofpga/trunk/sw/autofpga -o . global.txt bkram.txt buserr.txt clkcounter.txt clock.txt dlyarbiter.txt flash.txt gpio.txt icape.txt mdio.txt pic.txt pwrcount.txt rtcdate.txt rtcgps.txt spio.txt version.txt wbmouse.txt wboledbw.txt wbpmic.txt busconsole.txt zipmaster.txt gps.txt sdspi.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
`default_nettype	none
//
//
// Here is a list of defines which may be used, post auto-design
// (not post-build), to turn particular peripherals (and bus masters)
// on and off.  In particular, to turn off support for a particular
// design component, just comment out its respective define below
//
// These lines are taken from the respective @ACCESS tags for each of our
// components.  If a component doesn't have an @ACCESS tag, it will not
// be listed here.
//
// First, the independent access fields for any bus masters
`define	WBUBUS_MASTER
`define	INCLUDE_ZIPCPU
// And then for the independent peripherals
`define	SDSPI_ACCESS
`define	GPS_CLOCK
`define	FLASH_ACCESS
`define	GPSUART_ACCESS
`define	BUSPIC_ACCESS
`define	FLASH_ACCESS
`define	RTC_ACCESS
`define	BKRAM_ACCESS
`define	OLEDBW_ACCESS
`define	CFG_ACCESS
`define	SPIO_ACCESS
`define	MOUSE_ACCESS
`define	BUSCONSOLE_ACCESS
`define	GPIO_ACCESS
`define	MICROPHONE_ACCESS
`define	NETCTRL_ACCESS
//
//
// Then, the list of those things that have dependencies
//
//
`ifdef	RTC_ACCESS
`define	RTCDATE_ACCESS
`endif
`ifdef	SDSPI_ACCESS
`define	SDSPI_SCOPE
`endif
//
// End of dependency list
//
//
//
//
// Finally, we define our main module itself.  We start with the list of
// I/O ports, or wires, passed into (or out of) the main function.
//
// These fields are copied verbatim from the respective I/O port lists,
// from the fields given by @MAIN.PORTLIST
//
module	main(i_clk, i_reset,
		// The SD-Card wires
		o_sd_sck, o_sd_cmd, o_sd_data, i_sd_cmd, i_sd_data, i_sd_detect,
		// The GPS 1PPS signal port
		i_gps_pps,
		// The GPS-UART
		i_gpsu_rx, o_gpsu_tx,
		// The QSPI Flash
		o_qspi_cs_n, o_qspi_sck, o_qspi_dat, i_qspi_dat, o_qspi_mod,
		// Command and Control port
		i_host_rx_stb, i_host_rx_data,
		o_host_tx_stb, o_host_tx_data, i_host_tx_busy,
		// OLED control interface (roughly SPI)
		o_oled_sck, o_oled_mosi, o_oled_dcn,
		o_oled_reset_n, o_oled_panel_en, o_oled_logic_en,
		i_cpu_reset,
		// SPIO interface
		i_sw, i_btnc, i_btnd, i_btnl, i_btnr, i_btnu, o_led,
		// The PS/2 Mouse
		i_ps2, o_ps2,
		// GPIO ports
		i_gpio, o_gpio,
		// The PMic3 microphone wires
		o_mic_csn, o_mic_sck, i_mic_din,
		// The ethernet MDIO wires
		o_mdclk, o_mdio, o_mdwe, i_mdio);
//
// Any parameter definitions
//
// These are drawn from anything with a MAIN.PARAM definition.
// As they aren't connected to the toplevel at all, it would
// be best to use localparam over parameter, but here we don't
// check
	localparam [31:0] GPSCLOCK_DEFAULT_STEP = 32'haabcc771;
	//
	//
	// Variables/definitions needed by the ZipCPU BUS master
	//
	//
	// A 32-bit address indicating where teh ZipCPU should start running
	// from
	localparam	RESET_ADDRESS = 32'h01400000;
	//
	// The number of valid bits on the bus
	localparam	ZIP_ADDRESS_WIDTH = 30;	// Zip-CPU address width
	//
	// Number of ZipCPU interrupts
	localparam	ZIP_INTS = 16;
	//
	// ZIP_START_HALTED
	//
	// A boolean, indicating whether or not the ZipCPU be halted on startup?
	localparam	ZIP_START_HALTED=1'b1;
	localparam	ICAPE_LGDIV=3;
//
// The next step is to declare all of the various ports that were just
// listed above.  
//
// The following declarations are taken from the values of the various
// @MAIN.IODECL keys.
//
	input	wire		i_clk, i_reset;
	// SD-Card declarations
	output	wire		o_sd_sck, o_sd_cmd;
	output	wire	[3:0]	o_sd_data;
	input	wire		i_sd_cmd;
	input	wire	[3:0]	i_sd_data;
	input	wire		i_sd_detect;
	//The GPS Clock
	input	wire		i_gps_pps;
	input	wire		i_gpsu_rx;
	output	wire		o_gpsu_tx;
	// The QSPI flash
	output	wire		o_qspi_cs_n, o_qspi_sck;
	output	wire	[3:0]	o_qspi_dat;
	input	wire	[3:0]	i_qspi_dat;
	output	wire	[1:0]	o_qspi_mod;
	input	wire		i_host_rx_stb;
	input	wire	[7:0]	i_host_rx_data;
	output	wire		o_host_tx_stb;
	output	wire	[7:0]	o_host_tx_data;
	input	wire		i_host_tx_busy;
	// OLEDBW interface
	output	wire		o_oled_sck, o_oled_mosi,
				o_oled_dcn, o_oled_reset_n, o_oled_panel_en,
				o_oled_logic_en;
	input	wire		i_cpu_reset;
	// SPIO interface
	input	wire	[7:0]	i_sw;
	input	wire		i_btnc, i_btnd, i_btnl, i_btnr, i_btnu;
	output	wire	[7:0]	o_led;
	// The PS/2 Mouse
	input		[1:0]	i_ps2;
	output	wire	[1:0]	o_ps2;
	output	wire		o_mic_csn, o_mic_sck;
	input	wire		i_mic_din;
	// Ethernet control (MDIO)
	output	wire		o_mdclk, o_mdio, o_mdwe;
	input	wire		i_mdio;


	//
	// Declaring wishbone master bus data
	//
	wire		wb_cyc, wb_stb, wb_we, wb_stall, wb_err;
	reg	wb_ack;	// ACKs delayed by extra clock
	wire	[(30-1):0]	wb_addr;
	wire	[31:0]	wb_data;
	reg	[31:0]	wb_idata;
	wire	[3:0]	wb_sel;
	wire	sio_sel, sio_stall;
	reg	sio_ack;
	reg	[31:0]	sio_data;
	wire	dio_sel, dio_stall;
	reg	dio_ack;
	reg		pre_dio_ack;
	reg	[31:0]	dio_data;




	//
	// Declaring interrupt lines
	//
	// These declarations come from the various components values
	// given under the @INT.<interrupt name>.WIRE key.
	//
	wire	sdcard_int;	// sdcard.INT.SDCARD.WIRE
	wire	ck_pps;	// gck.INT.PPS.WIRE
	wire	gpsutx_int;	// gpsu.INT.GPSTX.WIRE
	wire	gpsutxf_int;	// gpsu.INT.GPSTXF.WIRE
	wire	gpsurx_int;	// gpsu.INT.GPSRX.WIRE
	wire	gpsurxf_int;	// gpsu.INT.GPSRXF.WIRE
	wire	w_bus_int;	// buspic.INT.BUS.WIRE
	wire	flash_interrupt;	// flash.INT.FLASH.WIRE
	wire	rtc_int;	// rtc.INT.RTC.WIRE
	wire	scope_sdcard_int;	// scope_sdcard.INT.SDSCOPE.WIRE
	wire	oled_int;	// oled.INT.OLED.WIRE
	wire	zip_cpu_int;	// zip.INT.ZIP.WIRE
	wire	spio_int;	// spio.INT.SPIO.WIRE
	wire	mous_interrupt;	// mous.INT.MOUSE.WIRE
	wire	uarttxf_int;	// uart.INT.UARTTXF.WIRE
	wire	uartrxf_int;	// uart.INT.UARTRXF.WIRE
	wire	uarttx_int;	// uart.INT.UARTTX.WIRE
	wire	uartrx_int;	// uart.INT.UARTRX.WIRE
	wire	gpio_int;	// gpio.INT.GPIO.WIRE
	wire	pmic_int;	// pmic.INT.MIC.WIRE


	//
	// Declaring Bus-Master data, internal wires and registers
	//
	// These declarations come from the various components values
	// given under the @MAIN.DEFNS key, for those components with
	// an MTYPE flag.
	//
	// Definitions for the WB-UART converter.  We really only need one
	// (more) non-bus wire--one to use to select if we are interacting
	// with the ZipCPU or not.
	wire		wbu_zip_sel;
	wire	[0:0]	wbubus_dbg;
`ifndef	INCLUDE_ZIPCPU
	wire		zip_dbg_ack, zip_dbg_stall;
	wire	[31:0]	zip_dbg_data;
`endif
	// ZipSystem/ZipCPU connection definitions
	// All we define here is a set of scope wires
	wire	[31:0]	zip_debug;
	wire		zip_trigger;
	wire		zip_dbg_ack, zip_dbg_stall;
	wire	[31:0]	zip_dbg_data;
	wire	[15:0] zip_int_vector;


	//
	// Declaring Peripheral data, internal wires and registers
	//
	// These declarations come from the various components values
	// given under the @MAIN.DEFNS key, for those components with a
	// PTYPE key but no MTYPE key.
	//
	wire[31:0]	sdspi_debug;
	wire	gps_pps, gps_led, gps_locked, gps_tracking;
	wire	[63:0]	gps_now, gps_err, gps_step;
	wire	[1:0]	gps_dbg_tick;
	wire	tb_pps;
	reg	r_sysclk_ack;
	wire	w_gpsu_cts_n, w_gpsu_rts_n;
	assign	w_gpsu_cts_n=1'b1;
	// Definitions in support of the GPS driven RTC
	wire	rtc_ppd, rtc_pps;
	reg	r_rtc_ack;
	wire	scope_sdcard_trigger,
		scope_sdcard_ce;
	wire	[4:0]	w_btn;
`include "builddate.v"
	// scrn_mouse is a 32-bit field containing 16-bits of x-position and
	// 16-bits of y position, limited to the size of the screen.
	wire	[31:0]	scrn_mouse;
	// Console definitions
	wire	w_console_rx_stb, w_console_tx_stb, w_console_busy;
	wire	[6:0]	w_console_rx_data, w_console_tx_data;
	localparam	NGPI = 16, NGPO=16;
	// GPIO ports
	input		[(NGPI-1):0]	i_gpio;
	output	wire	[(NGPO-1):0]	o_gpio;
	reg	[31:0]	r_pwrcount_data;


	//
	// Declaring other data, internal wires and registers
	//
	// These declarations come from the various components values
	// given under the @MAIN.DEFNS key, but which have neither PTYPE
	// nor MTYPE keys.
	//
	// Bus arbiter's lines
	wire		dwb_cyc, dwb_stb, dwb_we, dwb_ack, dwb_stall, dwb_err;
	wire	[(30-1):0]	dwb_addr;
	wire	[31:0]	dwb_odata, dwb_idata;
	wire	[3:0]	dwb_sel;


	//
	// Declaring interrupt vector wires
	//
	// These declarations come from the various components having
	// PIC and PIC.MAX keys.
	//
	wire	[14:0]	bus_int_vector;
	wire	[14:0]	alt_int_vector;
	wire	[14:0]	sys_int_vector;

	// Declare those signals necessary to build the bus, and detect
	// bus errors upon it.
	//
	wire	none_sel;
	reg	many_sel, many_ack;
	reg	[31:0]	r_bus_err;

	//
	// Wishbone master wire declarations
	//
	// These are given for every configuration file with an @MTYPE
	// tag, and the names are prefixed by whatever is in the @PREFIX tag.
	//

	wire		wbu_cyc, wbu_stb, wbu_we, wbu_ack, wbu_stall, wbu_err;
	wire	[(30-1):0]	wbu_addr;
	wire	[31:0]	wbu_data, wbu_idata;
	wire	[3:0]	wbu_sel;

	wire		zip_cyc, zip_stb, zip_we, zip_ack, zip_stall, zip_err;
	wire	[(30-1):0]	zip_addr;
	wire	[31:0]	zip_data, zip_idata;
	wire	[3:0]	zip_sel;


	//
	// Wishbone slave wire declarations
	//
	// These are given for every configuration file with a @PTYPE
	// tag, and the names are given by the @PREFIX tag.
	//

	wire	sdcard_ack, sdcard_stall, sdcard_sel;
	wire	[31:0]	sdcard_data;

	wire	gck_ack, gck_stall, gck_sel;
	wire	[31:0]	gck_data;

	wire	gtb_ack, gtb_stall, gtb_sel;
	wire	[31:0]	gtb_data;

	wire	sysclk_ack, sysclk_stall, sysclk_sel;
	wire	[31:0]	sysclk_data;

	wire	flctl_ack, flctl_stall, flctl_sel;
	wire	[31:0]	flctl_data;

	wire	gpsu_ack, gpsu_stall, gpsu_sel;
	wire	[31:0]	gpsu_data;

	wire	buspic_ack, buspic_stall, buspic_sel;
	wire	[31:0]	buspic_data;

	wire	flash_ack, flash_stall, flash_sel;
	wire	[31:0]	flash_data;

	wire	rtc_ack, rtc_stall, rtc_sel;
	wire	[31:0]	rtc_data;

	wire	bkram_ack, bkram_stall, bkram_sel;
	wire	[31:0]	bkram_data;

	wire	scope_sdcard_ack, scope_sdcard_stall, scope_sdcard_sel;
	wire	[31:0]	scope_sdcard_data;

	wire	buserr_ack, buserr_stall, buserr_sel;
	wire	[31:0]	buserr_data;

	wire	oled_ack, oled_stall, oled_sel;
	wire	[31:0]	oled_data;

	wire	cfg_ack, cfg_stall, cfg_sel;
	wire	[31:0]	cfg_data;

	wire	date_ack, date_stall, date_sel;
	wire	[31:0]	date_data;

	wire	spio_ack, spio_stall, spio_sel;
	wire	[31:0]	spio_data;

	wire	version_ack, version_stall, version_sel;
	wire	[31:0]	version_data;

	wire	mous_ack, mous_stall, mous_sel;
	wire	[31:0]	mous_data;

	wire	uart_ack, uart_stall, uart_sel;
	wire	[31:0]	uart_data;

	wire	gpio_ack, gpio_stall, gpio_sel;
	wire	[31:0]	gpio_data;

	wire	pmic_ack, pmic_stall, pmic_sel;
	wire	[31:0]	pmic_data;

	wire	mdio_ack, mdio_stall, mdio_sel;
	wire	[31:0]	mdio_data;

	wire	pwrcount_ack, pwrcount_stall, pwrcount_sel;
	wire	[31:0]	pwrcount_data;


	// Wishbone peripheral address decoding
	// This particular address decoder decodes addresses for all
	// peripherals (components with a @PTYPE tag), based upon their
	// NADDR (number of addresses required) tag
	//

	wire	[2:0]	sio_skip; // bits 0000001c, sbaw=3
	assign	sio_skip = {
			wb_addr[ 2: 0]
		};
	assign	      buserr_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b000_);
	assign	      buspic_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b001_);
	assign	        date_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b010_);
	assign	        gpio_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b011_);
	assign	    pwrcount_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b100_);
	assign	        spio_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b101_);
	assign	      sysclk_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b110_);
	assign	     version_sel = (sio_sel)&&(sio_skip[ 2: 0] ==  3'b111_);
	wire	[2:0]	dio_skip; // bits 00000070, sbaw=5
	assign	dio_skip = {
			wb_addr[ 4: 2]
		};
	assign	         gck_sel = (dio_sel)&&(dio_skip[ 2: 0] ==  3'b000_);
	assign	        mous_sel = (dio_sel)&&(dio_skip[ 2: 0] ==  3'b001_);
	assign	        oled_sel = (dio_sel)&&(dio_skip[ 2: 0] ==  3'b010_);
	assign	         rtc_sel = (dio_sel)&&(dio_skip[ 2: 0] ==  3'b011_);
	assign	         gtb_sel = (dio_sel)&&(dio_skip[ 2: 1] ==  2'b10);
	wire	[9:0]	wb_skip; // bits 011007f8, sbaw=23
	assign	wb_skip = {
			wb_addr[22],
			wb_addr[18],
			wb_addr[ 8: 1]
		};
	assign	        pmic_sel = ( wb_skip[ 9: 0] == 10'b00_1010_0000_);
	assign	scope_sdcard_sel = ( wb_skip[ 9: 0] == 10'b00_1010_0001_);
	assign	       flctl_sel = ( wb_skip[ 9: 1] ==  9'b00_1010_001);
	assign	        gpsu_sel = ( wb_skip[ 9: 1] ==  9'b00_1010_010);
	assign	      sdcard_sel = ( wb_skip[ 9: 1] ==  9'b00_1010_011);
	assign	        uart_sel = ( wb_skip[ 9: 1] ==  9'b00_1010_100);
	assign	         cfg_sel = ( wb_skip[ 9: 4] ==  6'b00_1011_);
	assign	        mdio_sel = ( wb_skip[ 9: 4] ==  6'b00_1100_);
	assign	       bkram_sel = ( wb_skip[ 9: 8] ==  2'b01_);
	assign	       flash_sel = ( wb_skip[ 9: 9] ==  1'b1);
	assign	         dio_sel = ( wb_skip[ 9: 4] ==  6'b00_1001_);
	assign	         sio_sel = ( wb_skip[ 9: 2] ==  8'b00_1000_00);
	assign	none_sel = (wb_stb)&&({ sio_sel, dio_sel, flash_sel, bkram_sel, mdio_sel, cfg_sel, uart_sel, sdcard_sel, gpsu_sel, flctl_sel, scope_sdcard_sel, pmic_sel} == 0);
	//
	// many_sel
	//
	// This should *never* be true .... unless the address decoding logic
	// is somehow broken.  Given that a computer is generating the
	// addresses, that should never happen.  However, since it has
	// happened to me before (without the computer), I test/check for it
	// here.
	//
	// Devices are placed here as a natural result of the address
	// decoding logic.  Thus, any device with a sel_ line will be
	// tested here.
	//
`ifdef	VERILATOR

	always @(*)
		case({sio_sel, dio_sel, flash_sel, bkram_sel, mdio_sel, cfg_sel, uart_sel, sdcard_sel, gpsu_sel, flctl_sel, scope_sdcard_sel, pmic_sel})
			12'h0: many_sel = 1'b0;
			12'b100000000000: many_sel = 1'b0;
			12'b010000000000: many_sel = 1'b0;
			12'b001000000000: many_sel = 1'b0;
			12'b000100000000: many_sel = 1'b0;
			12'b000010000000: many_sel = 1'b0;
			12'b000001000000: many_sel = 1'b0;
			12'b000000100000: many_sel = 1'b0;
			12'b000000010000: many_sel = 1'b0;
			12'b000000001000: many_sel = 1'b0;
			12'b000000000100: many_sel = 1'b0;
			12'b000000000010: many_sel = 1'b0;
			12'b000000000001: many_sel = 1'b0;
			default: many_sel = (wb_stb);
		endcase

`else	// VERILATOR

	always @(*)
		case({sio_sel, dio_sel, flash_sel, bkram_sel, mdio_sel, cfg_sel, uart_sel, sdcard_sel, gpsu_sel, flctl_sel, scope_sdcard_sel, pmic_sel})
			12'h0: many_sel <= 1'b0;
			12'b100000000000: many_sel <= 1'b0;
			12'b010000000000: many_sel <= 1'b0;
			12'b001000000000: many_sel <= 1'b0;
			12'b000100000000: many_sel <= 1'b0;
			12'b000010000000: many_sel <= 1'b0;
			12'b000001000000: many_sel <= 1'b0;
			12'b000000100000: many_sel <= 1'b0;
			12'b000000010000: many_sel <= 1'b0;
			12'b000000001000: many_sel <= 1'b0;
			12'b000000000100: many_sel <= 1'b0;
			12'b000000000010: many_sel <= 1'b0;
			12'b000000000001: many_sel <= 1'b0;
			default: many_sel <= (wb_stb);
		endcase

`endif	// VERILATOR

	//
	// many_ack
	//
	// It is also a violation of the bus protocol to produce multiply
	// acks at once and on the same clock.  In that case, the bus
	// can't decide which result to return.  Worse, if someone is waiting
	// for a return value, that value will never come since another ack
	// masked it.
	//
	// The other error that isn't tested for here, no would I necessarily
	// know how to test for it, is when peripherals return values out of
	// order.  Instead, I propose keeping that from happening by
	// guaranteeing, in software, that two peripherals are not accessed
	// immediately one after the other.
	//
	always @(posedge i_clk)
		case({sio_ack, dio_ack, flash_ack, bkram_ack, mdio_ack, cfg_ack, uart_ack, sdcard_ack, gpsu_ack, flctl_ack, scope_sdcard_ack, pmic_ack})
			12'h0: many_ack <= 1'b0;
			12'b100000000000: many_ack <= 1'b0;
			12'b010000000000: many_ack <= 1'b0;
			12'b001000000000: many_ack <= 1'b0;
			12'b000100000000: many_ack <= 1'b0;
			12'b000010000000: many_ack <= 1'b0;
			12'b000001000000: many_ack <= 1'b0;
			12'b000000100000: many_ack <= 1'b0;
			12'b000000010000: many_ack <= 1'b0;
			12'b000000001000: many_ack <= 1'b0;
			12'b000000000100: many_ack <= 1'b0;
			12'b000000000010: many_ack <= 1'b0;
			12'b000000000001: many_ack <= 1'b0;
		default: many_ack <= (wb_cyc);
		endcase
	//
	// wb_ack
	//
	// The returning wishbone ack is equal to the OR of every component that
	// might possibly produce an acknowledgement, gated by the CYC line.  To
	// add new components, OR their acknowledgements in here.
	//
	// To return an ack here, a component must have a @PTYPE.  Acks from
	// any @PTYPE SINGLE and DOUBLE components have been collected
	// together into sio_ack and dio_ack respectively, which will appear.
	// ahead of any other device acks.
	//
	always @(posedge i_clk)
		sio_ack <= (wb_stb)&&(sio_sel);
	always @(posedge i_clk)
		pre_dio_ack <= (wb_stb)&&(dio_sel);
	always @(posedge i_clk)
		dio_ack <= pre_dio_ack;
	always @(posedge i_clk)
		wb_ack <= (wb_cyc)&&(|{sio_ack, dio_ack, flash_ack, bkram_ack, mdio_ack, cfg_ack, uart_ack, sdcard_ack, gpsu_ack, flctl_ack, scope_sdcard_ack, pmic_ack});


	//
	// wb_stall
	//
	// The returning wishbone stall line really depends upon what device
	// is requested.  Thus, if a particular device is selected, we return 
	// the stall line for that device.
	//
	// Stall lines come from any component with a @PTYPE key and a
	// @NADDR > 0.  Since those components of @PTYPE SINGLE or DOUBLE
	// are not allowed to stall, they have been removed from this list
	// here for simplicity.
	//
	assign	sio_stall = 1'b0;
	assign	dio_stall = 1'b0;
	assign	wb_stall = 
		  (wb_stb)&&(  pmic_sel)&&(  pmic_stall)
		||(wb_stb)&&(scope_sdcard_sel)&&(scope_sdcard_stall)
		||(wb_stb)&&( flctl_sel)&&( flctl_stall)
		||(wb_stb)&&(  gpsu_sel)&&(  gpsu_stall)
		||(wb_stb)&&(sdcard_sel)&&(sdcard_stall)
		||(wb_stb)&&(  uart_sel)&&(  uart_stall)
		||(wb_stb)&&(   cfg_sel)&&(   cfg_stall)
		||(wb_stb)&&(  mdio_sel)&&(  mdio_stall)
		||(wb_stb)&&( bkram_sel)&&( bkram_stall)
		||(wb_stb)&&( flash_sel)&&( flash_stall)
		||(wb_stb)&&(   dio_sel)&&(   dio_stall)
		||(wb_stb)&&(   sio_sel)&&(   sio_stall);


	//
	// wb_err
	//
	// This is the bus error signal.  It should never be true, but practice
	// teaches us otherwise.  Here, we allow for three basic errors:
	//
	// 1. STB is true, but no devices are selected
	//
	//	This is the null pointer reference bug.  If you try to access
	//	something on the bus, at an address with no mapping, the bus
	//	should produce an error--such as if you try to access something
	//	at zero.
	//
	// 2. STB is true, and more than one device is selected
	//
	//	(This can be turned off, if you design this file well.  For
	//	this line to be true means you have a design flaw.)
	//
	// 3. If more than one ACK is every true at any given time.
	//
	//	This is a bug of bus usage, combined with a subtle flaw in the
	//	WB pipeline definition.  You can issue bus requests, one per
	//	clock, and if you cross device boundaries with your requests,
	//	you may have things come back out of order (not detected here)
	//	or colliding on return (detected here).  The solution to this
	//	problem is to make certain that any burst request does not cross
	//	device boundaries.  This is a requirement of whoever (or
	//	whatever) drives the bus.
	//
	assign	wb_err = ((wb_stb)&&(none_sel || many_sel))
				|| ((wb_cyc)&&(many_ack));

	always @(posedge i_clk)
		if (wb_err)
			r_bus_err <= { wb_addr, 2'b00 };

	//Now we turn to defining all of the parts and pieces of what
	// each of the various peripherals does, and what logic it needs.
	//
	// This information comes from the @MAIN.INSERT and @MAIN.ALT tags.
	// If an @ACCESS tag is available, an ifdef is created to handle
	// having the access and not.  If the @ACCESS tag is `defined above
	// then the @MAIN.INSERT code is executed.  If not, the @MAIN.ALT
	// code is exeucted, together with any other cleanup settings that
	// might need to take place--such as returning zeros to the bus,
	// or making sure all of the various interrupt wires are set to
	// zero if the component is not included.
	//
	//
	// Declare the interrupt busses
	//
	assign	bus_int_vector = {
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		mous_interrupt,
		spio_int,
		flash_interrupt,
		sdcard_int
	};
	assign	alt_int_vector = {
		1'b0,
		1'b0,
		gpio_int,
		uartrx_int,
		uarttx_int,
		rtc_int,
		gpsurx_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
	assign	sys_int_vector = {
		1'b0,
		pmic_int,
		uartrxf_int,
		uarttxf_int,
		mous_interrupt,
		oled_int,
		ck_pps,
		sdcard_int,
		w_bus_int,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0,
		1'b0
	};
`ifdef	SDSPI_ACCESS
	// SPI mapping
	wire	w_sd_cs_n, w_sd_mosi, w_sd_miso;

	sdspi	sdcardi(i_clk,
		wb_cyc,
			(wb_stb)&&(sdcard_sel),
			wb_we,
			wb_addr[1:0],
			wb_data,
			sdcard_ack, sdcard_stall, sdcard_data,
		w_sd_cs_n, o_sd_sck, w_sd_mosi, w_sd_miso,
		sdcard_int, 1'b1, sdspi_debug);

	assign	w_sd_miso = i_sd_data[0];
	assign	o_sd_data = { w_sd_cs_n, 3'b111 };
	assign	o_sd_cmd  = w_sd_mosi;
`else	// SDSPI_ACCESS
	assign	o_sd_sck   = 1'b1;
	assign	o_sd_cmd   = 1'b1;
	assign	o_sd_data  = 4'hf;

	reg	r_sdcard_ack;
	always @(posedge i_clk)
		r_sdcard_ack <= (wb_stb)&&(sdcard_sel);

	assign	sdcard_ack   = r_sdcard_ack;
	assign	sdcard_stall = 1'b0;
	assign	sdcard_data  = 32'h0;

	assign	sdcard_int = 1'b0;	// sdcard.INT.SDCARD.WIRE
`endif	// SDSPI_ACCESS

`ifdef	GPS_CLOCK
	wire	[1:0]	ck_dbg;

	gpsclock #(.DEFAULT_STEP(GPSCLOCK_DEFAULT_STEP))
		ppsck(i_clk, 1'b0, gps_pps, ck_pps, gps_led,
			(wb_stb)&&(gck_sel), wb_we, wb_addr[1:0], wb_data,
				gck_ack, gck_stall, gck_data,
			gps_tracking, gps_now, gps_step, gps_err, gps_locked,
			ck_dbg);
`else	// GPS_CLOCK
	wire	[31:0]	pre_step;
	assign	pre_step = { 16'h00, (({GPSCLOCK_DEFAULT_STEP[27:0],20'h00})
				>>GPSCLOCK_DEFAULT_STEP[31:28]) };
	always @(posedge i_clk)
		{ ck_pps, gps_step[31:0] } <= gps_step + pre_step;
	assign	gck_stall  = 1'b0;
	assign	gps_now    = 64'h0;
	assign	gps_err    = 64'h0;
	assign	gps_step   = 64'h0;
	assign	gps_led    = 1'b0;
	assign	gps_locked = 1'b0;


	reg	r_gck_ack;
	always @(posedge i_clk)
		r_gck_ack <= (wb_stb)&&(gck_sel);

	assign	gck_ack   = r_gck_ack;
	assign	gck_stall = 1'b0;
	assign	gck_data  = 32'h0;

	assign	ck_pps = 1'b0;	// gck.INT.PPS.WIRE
`endif	// GPS_CLOCK

`ifdef	GPS_CLOCK
	gpsclock_tb ppstb(i_clk, ck_pps, tb_pps,
			(wb_stb)&&(gtb_sel), wb_we, wb_addr[2:0], wb_data,
				gtb_ack, gtb_stall, gtb_data,
			gps_err, gps_now, gps_step);

`ifdef	GPSTB
	assign	gps_pps = tb_pps;
`else
	assign	gps_pps = i_gps_pps;
`endif

`endif

	clkcounter sysclkctr(i_clk, ck_pps, i_clk, sysclk_data);
	always @(posedge i_clk)
		r_sysclk_ack <= (wb_stb)&&(sysclk_sel);
	assign	sysclk_ack   = r_sysclk_ack;
	assign	sysclk_stall = 1'b0;
`ifdef	FLASH_ACCESS
	// The Flash control interface result comes back together with the
	// flash interface itself.  Hence, we always return zero here.
	assign	flctl_ack   = 1'b0;
	assign	flctl_stall = 1'b0;
	assign	flctl_data  = 0;
`else	// FLASH_ACCESS

	reg	r_flctl_ack;
	always @(posedge i_clk)
		r_flctl_ack <= (wb_stb)&&(flctl_sel);

	assign	flctl_ack   = r_flctl_ack;
	assign	flctl_stall = 1'b0;
	assign	flctl_data  = 32'h0;

`endif	// FLASH_ACCESS

`ifdef	GPSUART_ACCESS
	wbuart #(.INITIAL_SETUP(31'h000028b0))
 		gpsu_uart(i_clk, 1'b0,
 			wb_cyc, (wb_stb)&&(gpsu_sel), wb_we,
				wb_addr[1:0], wb_data,
 			gpsu_ack, gpsu_stall, gpsu_data,
 			i_gpsu_rx, o_gpsu_tx, w_gpsu_cts_n, w_gpsu_rts_n,
			gpsurx_int, gpsutx_int,
			gpsurxf_int, gpsutxf_int);
`else	// GPSUART_ACCESS
	assign	o_gpsu_tx    = 1'b1;
	assign	w_gpsu_rts_n = 1'b0;

	reg	r_gpsu_ack;
	always @(posedge i_clk)
		r_gpsu_ack <= (wb_stb)&&(gpsu_sel);

	assign	gpsu_ack   = r_gpsu_ack;
	assign	gpsu_stall = 1'b0;
	assign	gpsu_data  = 32'h0;

	assign	 = 1'b0;	// gpsu.INT.UARTTXF.WIRE
	assign	 = 1'b0;	// gpsu.INT.UARTRXF.WIRE
	assign	 = 1'b0;	// gpsu.INT.UARTTX.WIRE
	assign	 = 1'b0;	// gpsu.INT.UARTRX.WIRE
	assign	gpsutx_int = 1'b0;	// gpsu.INT.GPSTX.WIRE
	assign	gpsutxf_int = 1'b0;	// gpsu.INT.GPSTXF.WIRE
	assign	gpsurx_int = 1'b0;	// gpsu.INT.GPSRX.WIRE
	assign	gpsurxf_int = 1'b0;	// gpsu.INT.GPSRXF.WIRE
`endif	// GPSUART_ACCESS

`ifdef	BUSPIC_ACCESS
	//
	// The BUS Interrupt controller
	//
	icontrol #(15)	buspici(i_clk, 1'b0, (wb_stb)&&(buspic_sel),
			wb_data, buspic_data, bus_int_vector, w_bus_int);
`else	// BUSPIC_ACCESS

	reg	r_buspic_ack;
	always @(posedge i_clk)
		r_buspic_ack <= (wb_stb)&&(buspic_sel);

	assign	buspic_ack   = r_buspic_ack;
	assign	buspic_stall = 1'b0;
	assign	buspic_data  = 32'h0;

	assign	w_bus_int = 1'b0;	// buspic.INT.BUS.WIRE
`endif	// BUSPIC_ACCESS

`ifdef	INCLUDE_ZIPCPU
	//
	//
	// And an arbiter to decide who gets access to the bus
	//
	//
	wbpriarbiter #(32,30)	bus_arbiter(i_clk,
		// The Zip CPU bus master --- gets the priority slot
		zip_cyc, zip_stb, zip_we, zip_addr, zip_data, zip_sel,
			zip_ack, zip_stall, zip_err,
		// The UART interface master
		(wbu_cyc)&&(!wbu_zip_sel), (wbu_stb)&&(!wbu_zip_sel), wbu_we,
			wbu_addr[(30-1):0], wbu_data, wbu_sel,
			wbu_ack, wbu_stall, wbu_err,
		// Common bus returns
		dwb_cyc, dwb_stb, dwb_we, dwb_addr, dwb_odata, dwb_sel,
			dwb_ack, dwb_stall, dwb_err);

	// And because the ZipCPU and the Arbiter can create an unacceptable
	// delay, we often fail timing.  So, we add in a delay cycle
`else
	// If no ZipCPU, no delay arbiter is needed
	assign	dwb_cyc  = wbu_cyc;
	assign	dwb_stb  = wbu_stb;
	assign	dwb_we   = wbu_we;
	assign	dwb_addr = wbu_addr;
	assign	dwb_odata = wbu_data;
	assign	dwb_sel  = wbu_sel;
	assign	wbu_ack   = dwb_ack;
	assign	wbu_stall = dwb_stall;
	assign	wbu_err   = dwb_err;
	// assign wbu_idata = dwb_idata;
`endif	// INCLUDE_ZIPCPU

`ifdef	WBUBUS_MASTER
`ifdef	INCLUDE_ZIPCPU
`define	BUS_DELAY_NEEDED
`endif
`endif
`ifdef	BUS_DELAY_NEEDED
	busdelay #(30)	dwb_delay(i_clk,
		dwb_cyc, dwb_stb, dwb_we, dwb_addr, dwb_odata, dwb_sel,
			dwb_ack, dwb_stall, dwb_idata, dwb_err,
		wb_cyc, wb_stb, wb_we, wb_addr, wb_data, wb_sel,
			wb_ack, wb_stall, wb_idata, wb_err);
`else
	// If one of the two, the ZipCPU or the WBUBUS, isn't here, then we
	// don't need the bus delay, and we can go directly from the bus driver
	// to the bus itself
	//
	assign	wb_cyc    = dwb_cyc;
	assign	wb_stb    = dwb_stb;
	assign	wb_we     = dwb_we;
	assign	wb_addr   = dwb_addr;
	assign	wb_data   = dwb_odata;
	assign	wb_sel    = dwb_sel;
	assign	dwb_ack   = wb_ack;
	assign	dwb_stall = wb_stall;
	assign	dwb_err   = wb_err;
	assign	dwb_idata = wb_idata;
`endif
	assign	wbu_idata = dwb_idata;
`ifdef	INCLUDE_ZIPCPU
	assign	zip_idata = dwb_idata;
`endif
`ifdef	FLASH_ACCESS
	wbqspiflash #(24)
		flashmem(i_clk,
			(wb_cyc), (wb_stb)&&(flash_sel), (wb_stb)&&(flctl_sel),wb_we,
			wb_addr[(24-3):0], wb_data,
			flash_ack, flash_stall, flash_data,
			o_qspi_sck, o_qspi_cs_n, o_qspi_mod, o_qspi_dat, i_qspi_dat,
			flash_interrupt);
`else	// FLASH_ACCESS
	assign	o_qspi_sck  = 1'b1;
	assign	o_qspi_cs_n = 1'b1;
	assign	o_qspi_mod  = 2'b01;
	assign	o_qspi_dat  = 4'b1111;

	reg	r_flash_ack;
	always @(posedge i_clk)
		r_flash_ack <= (wb_stb)&&(flash_sel);

	assign	flash_ack   = r_flash_ack;
	assign	flash_stall = 1'b0;
	assign	flash_data  = 32'h0;

	assign	flash_interrupt = 1'b0;	// flash.INT.FLASH.WIRE
`endif	// FLASH_ACCESS

`ifdef	RTC_ACCESS
	rtcgps	#(32'h002af31d) thertc(i_clk,
		wb_cyc, (wb_stb)&&(rtc_sel), wb_we, wb_addr[1:0], wb_data,
		rtc_data, rtc_int, rtc_ppd,
		gps_tracking, ck_pps, gps_step[47:16], rtc_pps);
	initial	r_rtc_ack = 1'b0;
	always @(posedge i_clk)
		r_rtc_ack <= (wb_stb)&&(rtc_sel);
	assign	rtc_ack = r_rtc_ack;
`else	// RTC_ACCESS
	assign	rtc_pps = 1'b0;

	reg	r_rtc_ack;
	always @(posedge i_clk)
		r_rtc_ack <= (wb_stb)&&(rtc_sel);

	assign	rtc_ack   = r_rtc_ack;
	assign	rtc_stall = 1'b0;
	assign	rtc_data  = 32'h0;

	assign	rtc_int = 1'b0;	// rtc.INT.RTC.WIRE
`endif	// RTC_ACCESS

`ifdef	BKRAM_ACCESS
	memdev #(.LGMEMSZ(20), .EXTRACLOCK(1))
		bkrami(i_clk,
			(wb_cyc), (wb_stb)&&(bkram_sel), wb_we,
				wb_addr[(20-3):0], wb_data, wb_sel,
				bkram_ack, bkram_stall, bkram_data);
`else	// BKRAM_ACCESS

	reg	r_bkram_ack;
	always @(posedge i_clk)
		r_bkram_ack <= (wb_stb)&&(bkram_sel);

	assign	bkram_ack   = r_bkram_ack;
	assign	bkram_stall = 1'b0;
	assign	bkram_data  = 32'h0;

`endif	// BKRAM_ACCESS

`ifdef	SDSPI_SCOPE
	assign	scope_sdcard_trigger = (wb_stb)
				&&(sdcard_sel)&&(wb_we);
	assign	scope_sdcard_ce = 1'b1;
	wbscope #(5'h9) sdspiscope(i_clk, scope_sdcard_ce,
			scope_sdcard_trigger,
			sdspi_debug,
			i_clk, wb_cyc,
			(wb_stb)&&(scope_sdcard_sel),
			wb_we,
			wb_addr[0],
			wb_data,
			scope_sdcard_ack,
			scope_sdcard_stall,
			scope_sdcard_data,
			scope_sdcard_int);

`else	// SDSPI_SCOPE

	reg	r_scope_sdcard_ack;
	always @(posedge i_clk)
		r_scope_sdcard_ack <= (wb_stb)&&(scope_sdcard_sel);

	assign	scope_sdcard_ack   = r_scope_sdcard_ack;
	assign	scope_sdcard_stall = 1'b0;
	assign	scope_sdcard_data  = 32'h0;

	assign	scope_sdcard_int = 1'b0;	// scope_sdcard.INT.SDSCOPE.WIRE
`endif	// SDSPI_SCOPE

`ifdef	WBUBUS_MASTER
`ifdef	INCLUDE_ZIPCPU
	assign	wbu_zip_sel   = wbu_addr[29];
`else
	assign	wbu_zip_sel   = 1'b0;
	assign	zip_dbg_ack   = 1'b0;
	assign	zip_dbg_stall = 1'b0;
	assign	zip_dbg_data  = 0;
`endif
`ifndef	BUSPIC_ACCESS
	wire	w_bus_int;
	assign	w_bus_int = 1'b0;
`endif
	wire	[31:0]	wbu_tmp_addr;
	wbuconsole genbus(i_clk, i_host_rx_stb, i_host_rx_data,
			wbu_cyc, wbu_stb, wbu_we, wbu_tmp_addr, wbu_data,
			(wbu_zip_sel)?zip_dbg_ack:wbu_ack,
			(wbu_zip_sel)?zip_dbg_stall:wbu_stall,
				(wbu_zip_sel)?1'b0:wbu_err,
				(wbu_zip_sel)?zip_dbg_data:wbu_idata,
			w_bus_int,
			o_host_tx_stb, o_host_tx_data, i_host_tx_busy,
			//
			w_console_tx_stb, w_console_tx_data, w_console_busy,
			w_console_rx_stb, w_console_rx_data,
			//
			wbubus_dbg[0]);
	assign	wbu_sel = 4'hf;
	assign	wbu_addr = wbu_tmp_addr[(30-1):0];
`else	// WBUBUS_MASTER

	assign	wbu_cyc = 1'b0;
	assign	wbu_stb = 1'b0;
	assign	wbu_we  = 1'b0;
	assign	wbu_sel = 4'b0000;
	assign	wbu_addr = 0;
	assign	wbu_data = 0;

`endif	// WBUBUS_MASTER

	assign	buserr_data = r_bus_err;
`ifdef	OLEDBW_ACCESS
	wboledbw #(.CBITS(4)) oledctrl(i_clk,
		(wb_cyc), (wb_stb)&&(oled_sel), wb_we,
				wb_addr[1:0], wb_data,
			oled_ack, oled_stall, oled_data,
		o_oled_sck, o_oled_mosi, o_oled_dcn,
		{ o_oled_reset_n, o_oled_panel_en, o_oled_logic_en },
		oled_int);
`else	// OLEDBW_ACCESS
	assign	o_oled_sck     = 1'b1;
	assign	o_oled_mosi    = 1'b1;
	assign	o_oled_dcn     = 1'b1;
	assign	o_oled_reset_n = 1'b0;
	assign	o_oled_panel_en= 1'b0;
	assign	o_oled_logic_en= 1'b0;


	reg	r_oled_ack;
	always @(posedge i_clk)
		r_oled_ack <= (wb_stb)&&(oled_sel);

	assign	oled_ack   = r_oled_ack;
	assign	oled_stall = 1'b0;
	assign	oled_data  = 32'h0;

	assign	oled_int = 1'b0;	// oled.INT.OLED.WIRE
`endif	// OLEDBW_ACCESS

`ifdef	INCLUDE_ZIPCPU
	//
	//
	// The ZipCPU/ZipSystem BUS master
	//
	//
`ifndef	WBUBUS_MASTER
	wire	wbu_zip_sel;
	assign	wbu_zip_sel = 1'b0;
`endif
	assign	zip_int_vector = { alt_int_vector[14:8], sys_int_vector[14:6] };
	zipsystem #(RESET_ADDRESS,ZIP_ADDRESS_WIDTH,10,ZIP_START_HALTED,ZIP_INTS)
		swic(i_clk, i_cpu_reset,
			// Zippys wishbone interface
			zip_cyc, zip_stb, zip_we, zip_addr, zip_data, zip_sel,
					zip_ack, zip_stall, zip_idata, zip_err,
			zip_int_vector, zip_cpu_int,
			// Debug wishbone interface
			((wbu_cyc)&&(wbu_zip_sel)),
			((wbu_stb)&&(wbu_zip_sel)),wbu_we, wbu_addr[0],
			wbu_data, zip_dbg_ack, zip_dbg_stall, zip_dbg_data,
			zip_debug);
	assign	zip_trigger = zip_debug[0];
`else	// INCLUDE_ZIPCPU

	assign	zip_cyc = 1'b0;
	assign	zip_stb = 1'b0;
	assign	zip_we  = 1'b0;
	assign	zip_sel = 4'b0000;
	assign	zip_addr = 0;
	assign	zip_data = 0;

	assign	zip_cpu_int = 1'b0;	// zip.INT.ZIP.WIRE
`endif	// INCLUDE_ZIPCPU

`ifdef	CFG_ACCESS
	wire[31:0]	cfg_debug;
`ifdef	VERILATOR
	reg	r_cfg_ack;
	always @(posedge i_clk)
		r_cfg_ack <= (wb_stb)&&(cfg_sel);
	assign	cfg_stall = 1'b0;
	assign	cfg_data  = 32'h00;
`else
	wbicapetwo #(ICAPE_LGDIV)
		cfgport(i_clk, wb_cyc, (wb_stb)&&(cfg_sel), wb_we,
			wb_addr[4:0], wb_data,
			cfg_ack, cfg_stall, cfg_data);
`endif
`else	// CFG_ACCESS

	reg	r_cfg_ack;
	always @(posedge i_clk)
		r_cfg_ack <= (wb_stb)&&(cfg_sel);

	assign	cfg_ack   = r_cfg_ack;
	assign	cfg_stall = 1'b0;
	assign	cfg_data  = 32'h0;

`endif	// CFG_ACCESS

`ifdef	RTCDATE_ACCESS
	//
	// The Calendar DATE
	//
	rtcdate	thedate(i_clk, rtc_ppd,
		(wb_stb)&&(date_sel), wb_we, wb_data,
			date_ack, date_stall, date_data);
`else	// RTCDATE_ACCESS

	reg	r_date_ack;
	always @(posedge i_clk)
		r_date_ack <= (wb_stb)&&(date_sel);

	assign	date_ack   = r_date_ack;
	assign	date_stall = 1'b0;
	assign	date_data  = 32'h0;

`endif	// RTCDATE_ACCESS

`ifdef	SPIO_ACCESS
	assign	w_btn = { i_btnc, i_btnd, i_btnl, i_btnr, i_btnu };
	spio #(.NBTN(5), .NLEDS(8)) thespio(i_clk,
		wb_cyc, (wb_stb)&&(spio_sel), wb_we, wb_data, wb_sel,
			spio_ack, spio_stall, spio_data,
		i_sw, w_btn, o_led, spio_int);
`else	// SPIO_ACCESS
	assign	w_btn    = h0;
	assign	o_led_cs_n    = 8'h0;

	reg	r_spio_ack;
	always @(posedge i_clk)
		r_spio_ack <= (wb_stb)&&(spio_sel);

	assign	spio_ack   = r_spio_ack;
	assign	spio_stall = 1'b0;
	assign	spio_data  = 32'h0;

	assign	spio_int = 1'b0;	// spio.INT.SPIO.WIRE
`endif	// SPIO_ACCESS

	assign	version_data = `DATESTAMP;
	assign	version_ack = 1'b0;
	assign	version_stall = 1'b0;
`ifdef	MOUSE_ACCESS
	wbmouse themouse(i_clk,
		(wb_cyc), (wb_stb)&&(mous_sel), wb_we, wb_addr[1:0], wb_data,
			mous_ack, mous_stall, mous_data,
		i_ps2, o_ps2,
		scrn_mouse, mous_interrupt);
`else	// MOUSE_ACCESS
	// If there is no mouse, declare mouse types of things to be .. absent
	assign	scrn_mouse     = 32'h00;
	assign	o_ps2          = 2'b11;

	reg	r_mous_ack;
	always @(posedge i_clk)
		r_mous_ack <= (wb_stb)&&(mous_sel);

	assign	mous_ack   = r_mous_ack;
	assign	mous_stall = 1'b0;
	assign	mous_data  = 32'h0;

	assign	mous_interrupt = 1'b0;	// mous.INT.MOUSE.WIRE
`endif	// MOUSE_ACCESS

`ifdef	BUSCONSOLE_ACCESS
	wbconsole console(i_clk, 1'b0,
 			wb_cyc, (wb_stb)&&(uart_sel), wb_we,
				wb_addr[1:0], wb_data,
 			uart_ack, uart_stall, uart_data,
			w_console_tx_stb, w_console_tx_data, w_console_busy,
			w_console_rx_stb, w_console_rx_data,
			uartrx_int, uarttx_int, uartrxf_int, uarttxf_int);
`else	// BUSCONSOLE_ACCESS

	reg	r_uart_ack;
	always @(posedge i_clk)
		r_uart_ack <= (wb_stb)&&(uart_sel);

	assign	uart_ack   = r_uart_ack;
	assign	uart_stall = 1'b0;
	assign	uart_data  = 32'h0;

	assign	uarttxf_int = 1'b0;	// uart.INT.UARTTXF.WIRE
	assign	uartrxf_int = 1'b0;	// uart.INT.UARTRXF.WIRE
	assign	uarttx_int = 1'b0;	// uart.INT.UARTTX.WIRE
	assign	uartrx_int = 1'b0;	// uart.INT.UARTRX.WIRE
`endif	// BUSCONSOLE_ACCESS

`ifdef	GPIO_ACCESS
	//
	// GPIO
	//
	// Not used (yet), but this interface should allow us to control up to
	// 16 GPIO inputs, and another 16 GPIO outputs.  The interrupt trips
	// when any of the inputs changes.  (Sorry, which input isn't (yet)
	// selectable.)
	//
	localparam	INITIAL_GPIO = 16'h0f;
	wbgpio	#(NGPI, NGPO, INITIAL_GPIO)
		gpioi(i_clk, 1'b1, (wb_stb)&&(gpio_sel), 1'b1,
			wb_data, gpio_data, i_gpio, o_gpio, gpio_int);
`else	// GPIO_ACCESS

	reg	r_gpio_ack;
	always @(posedge i_clk)
		r_gpio_ack <= (wb_stb)&&(gpio_sel);

	assign	gpio_ack   = r_gpio_ack;
	assign	gpio_stall = 1'b0;
	assign	gpio_data  = 32'h0;

	assign	gpio_int = 1'b0;	// gpio.INT.GPIO.WIRE
`endif	// GPIO_ACCESS

`ifdef	MICROPHONE_ACCESS
	wbmic #(.DEFAULT_RELOAD(2083))
 		microphone(i_clk, 1'b0,
 			wb_cyc, (wb_stb)&&(pmic_sel), wb_we,
				wb_addr[0], wb_data,
 			pmic_ack, pmic_stall, pmic_data,
			o_mic_csn, o_mic_sck, i_mic_din, pmic_int);
`else	// MICROPHONE_ACCESS
	assign	o_mic_csn    = 1'b1;
	assign	o_mic_sck    = 1'b1;

	reg	r_pmic_ack;
	always @(posedge i_clk)
		r_pmic_ack <= (wb_stb)&&(pmic_sel);

	assign	pmic_ack   = r_pmic_ack;
	assign	pmic_stall = 1'b0;
	assign	pmic_data  = 32'h0;

	assign	pmic_int = 1'b0;	// pmic.INT.MIC.WIRE
`endif	// MICROPHONE_ACCESS

`ifdef	NETCTRL_ACCESS
	wire[31:0]	mdio_debug;
	enetctrl #(2)
		mdio(i_clk, i_reset, wb_cyc, (wb_stb)&&(mdio_sel), wb_we,
				wb_addr[4:0], wb_data[15:0],
			mdio_ack, mdio_stall, mdio_data,
			o_mdclk, o_mdio, i_mdio, o_mdwe, mdio_debug);
`else	// NETCTRL_ACCESS
	assign	o_mdclk = 1'b1;
	assign	o_mdio  = 1'b1;
	assign	o_mdwe  = 1'b0;;

	reg	r_mdio_ack;
	always @(posedge i_clk)
		r_mdio_ack <= (wb_stb)&&(mdio_sel);

	assign	mdio_ack   = r_mdio_ack;
	assign	mdio_stall = 1'b0;
	assign	mdio_data  = 32'h0;

`endif	// NETCTRL_ACCESS

	initial	r_pwrcount_data = 32'h0;
	always @(posedge i_clk)
	if (r_pwrcount_data[31])
		r_pwrcount_data[30:0] <= r_pwrcount_data[30:0] + 1'b1;
	else
		r_pwrcount_data[31:0] <= r_pwrcount_data[31:0] + 1'b1;
	assign	pwrcount_data = r_pwrcount_data;
	//
	// Finally, determine what the response is from the wishbone
	// bus
	//
	//
	//
	// wb_idata
	//
	// This is the data returned on the bus.  Here, we select between a
	// series of bus sources to select what data to return.  The basic
	// logic is simply this: the data we return is the data for which the
	// ACK line is high.
	//
	// The last item on the list is chosen by default if no other ACK's are
	// true.  Although we might choose to return zeros in that case, by
	// returning something we can skimp a touch on the logic.
	//
	// Any peripheral component with a @PTYPE value will be listed
	// here.
	//
	always @(posedge i_clk)
	casez({ buserr_sel, buspic_sel, date_sel, gpio_sel, pwrcount_sel, spio_sel, sysclk_sel, version_sel })
		 8'b1???????: sio_data <= buserr_data;
		 8'b01??????: sio_data <= buspic_data;
		 8'b001?????: sio_data <= date_data;
		 8'b0001????: sio_data <= gpio_data;
		 8'b00001???: sio_data <= pwrcount_data;
		 8'b000001??: sio_data <= spio_data;
		 8'b0000001?: sio_data <= sysclk_data;
		 8'b00000001: sio_data <= version_data;
		default: sio_data <= 32'h0;
	endcase

	always @(posedge i_clk)
	casez({ gck_ack, mous_ack, oled_ack, rtc_ack, gtb_ack })
		 5'b1????: dio_data <= gck_data;
		 5'b01???: dio_data <= mous_data;
		 5'b001??: dio_data <= oled_data;
		 5'b0001?: dio_data <= rtc_data;
		 5'b00001: dio_data <= gtb_data;
		default: dio_data <= 32'h0;
	endcase
	always @(posedge i_clk)
	begin
		casez({ sio_ack, dio_ack, flash_ack, bkram_ack, mdio_ack, cfg_ack, uart_ack, sdcard_ack, gpsu_ack, flctl_ack, scope_sdcard_ack, pmic_ack })
			12'b1???????????: wb_idata <= sio_data;
			12'b01??????????: wb_idata <= dio_data;
			12'b001?????????: wb_idata <= flash_data;
			12'b0001????????: wb_idata <= bkram_data;
			12'b00001???????: wb_idata <= mdio_data;
			12'b000001??????: wb_idata <= cfg_data;
			12'b0000001?????: wb_idata <= uart_data;
			12'b00000001????: wb_idata <= sdcard_data;
			12'b000000001???: wb_idata <= gpsu_data;
			12'b0000000001??: wb_idata <= flctl_data;
			12'b00000000001?: wb_idata <= scope_sdcard_data;
			12'b000000000001: wb_idata <= pmic_data;
			default: wb_idata <= 32'h0;
		endcase
	end


endmodule // main.v
