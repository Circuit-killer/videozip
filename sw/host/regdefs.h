////////////////////////////////////////////////////////////////////////////////
//
// Filename:	./regdefs.h
//
// Project:	VideoZip, a ZipCPU SoC supporting video functionality
//
// DO NOT EDIT THIS FILE!
// Computer Generated: This file is computer generated by AUTOFPGA. DO NOT EDIT.
// DO NOT EDIT THIS FILE!
//
// CmdLine:	../../../autofpga/trunk/sw/autofpga ../../../autofpga/trunk/sw/autofpga -o . global.txt bkram.txt buserr.txt clkcounter.txt dlyarbiter.txt flash.txt gpio.txt icape.txt mdio.txt pic.txt pwrcount.txt rtcdate.txt rtcgps.txt spio.txt version.txt wbmouse.txt wboledbw.txt wbpmic.txt wbuconsole.txt zipmaster.txt gps.txt sdspi.txt hdmi.txt xdc.txt xpander.txt sdvidram.txt genclk.txt vidarbiter.txt
//
// Creator:	Dan Gisselquist, Ph.D.
//		Gisselquist Technology, LLC
//
////////////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2017, Gisselquist Technology, LLC
//
// This program is free software (firmware): you can redistribute it and/or
// modify it under the terms of  the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
// target there if the PDF file isn't present.)  If not, see
// <http://www.gnu.org/licenses/> for a copy.
//
// License:	GPL, v3, as defined and found on www.gnu.org,
//		http://www.gnu.org/licenses/gpl.html
//
//
////////////////////////////////////////////////////////////////////////////////
//
//
#ifndef	REGDEFS_H
#define	REGDEFS_H


//
// The @REGDEFS.H.INCLUDE tag
//
// @REGDEFS.H.INCLUDE for masters
// @REGDEFS.H.INCLUDE for peripherals
// And finally any master REGDEFS.H.INCLUDE tags
// End of definitions from REGDEFS.H.INCLUDE


//
// Register address definitions, from @REGS.#d
//
// WB-Microphone registers
#define	R_MIC_DATA        	0x02000000	// 02000000, wbregs names: MICD
#define	R_MIC_CTRL        	0x02000004	// 02000000, wbregs names: MICC
// EDID/I2C Debug Scope
#define	R_EDID_SCOPC      	0x04000000	// 04000000, wbregs names: ESCOPC, ESCOPE
#define	R_EDID_SCOPD      	0x04000004	// 04000000, wbregs names: ESCOPD
// Scope outputs, for the hdmi input values
#define	R_SCOP_HDMIIN_CTRL	0x06000000	// 06000000, wbregs names: HINSCOPC, HINSCOPE
#define	R_SCOP_HDMIIN_DATA	0x06000004	// 06000000, wbregs names: HINSCOPD
// SDSPI Debugging scope
#define	R_SDSPI_SCOPC     	0x08000000	// 08000000, wbregs names: SDSCOPC, SDSCOPE
#define	R_SDSPI_SCOPD     	0x08000004	// 08000000, wbregs names: SDSCOPD
// FLASH erase/program configuration registers
#define	R_QSPI_EREG       	0x0a000000	// 0a000000, wbregs names: QSPIE
#define	R_QSPI_CREG       	0x0a000004	// 0a000000, wbregs names: QSPIC
#define	R_QSPI_SREG       	0x0a000008	// 0a000000, wbregs names: QSPIS
#define	R_QSPI_IDREG      	0x0a00000c	// 0a000000, wbregs names: QSPII
// GPS UART registers, similar to WBUART
#define	R_GPSU_SETUP      	0x0c000000	// 0c000000, wbregs names: GPSSETUP
#define	R_GPSU_FIFO       	0x0c000004	// 0c000000, wbregs names: GPSFIFO
#define	R_GPSU_UARTRX     	0x0c000008	// 0c000000, wbregs names: GPSRX
#define	R_GPSU_UARTTX     	0x0c00000c	// 0c000000, wbregs names: GPSTX
// SD-SPI addresses
#define	R_SDSPI_CTRL      	0x0e000000	// 0e000000, wbregs names: SDCARD
#define	R_SDSPI_DATA      	0x0e000004	// 0e000000, wbregs names: SDDATA
#define	R_SDSPI_FIFOA     	0x0e000008	// 0e000000, wbregs names: SDFIFOA, SDFIF0, SDFIFA
#define	R_SDSPI_FIFOB     	0x0e00000c	// 0e000000, wbregs names: SDFIFOB, SDFIF1, SDFIFB
// CONSOLE registers
#define	R_CONSOLE_FIFO    	0x10000004	// 10000000, wbregs names: UFIFO
#define	R_CONSOLE_UARTRX  	0x10000008	// 10000000, wbregs names: RX
#define	R_CONSOLE_UARTTX  	0x1000000c	// 10000000, wbregs names: TX
#define	R_BUSERR          	0x12000000	// 12000000, wbregs names: BUSERR
#define	R_BUSERR          	0x12000000	// 12000000, wbregs names: BUSERR
#define	R_PIC             	0x12000004	// 12000004, wbregs names: PIC
#define	R_PIC             	0x12000004	// 12000004, wbregs names: PIC
// HDMI-IN Clock Counter (measures clock speed)
#define	R_HDMI_INCLK      	0x12000008	// 12000008, wbregs names: HCLKIN
// HDMI-IN Clock Counter (measures clock speed)
#define	R_HDMI_INCLK      	0x12000008	// 12000008, wbregs names: HCLKIN
// HDMI-OUT Clock Counter (measures clock speed)
#define	R_HDMI_OUTCLK     	0x1200000c	// 1200000c, wbregs names: HCLKOUT
// HDMI-OUT Clock Counter (measures clock speed)
#define	R_HDMI_OUTCLK     	0x1200000c	// 1200000c, wbregs names: HCLKOUT
#define	R_DATE            	0x12000010	// 12000010, wbregs names: RTCDATE, DATE
#define	R_DATE            	0x12000010	// 12000010, wbregs names: RTCDATE, DATE
#define	R_GENCLK          	0x12000014	// 12000014, wbregs names: GENCLK
#define	R_GENCLK          	0x12000014	// 12000014, wbregs names: GENCLK
// SYSCLK Clock Counter (measures clock speed)
#define	R_GENCLKFB        	0x12000018	// 12000018, wbregs names: GENCLKFB
// SYSCLK Clock Counter (measures clock speed)
#define	R_GENCLKFB        	0x12000018	// 12000018, wbregs names: GENCLKFB
#define	R_GPIO            	0x1200001c	// 1200001c, wbregs names: GPIO, GPI, GPO
#define	R_GPIO            	0x1200001c	// 1200001c, wbregs names: GPIO, GPI, GPO
#define	R_FRAME_OFFSET    	0x12000020	// 12000020, wbregs names: FRAMEOFFSET
#define	R_FRAME_OFFSET    	0x12000020	// 12000020, wbregs names: FRAMEOFFSET
#define	R_PWRCOUNT        	0x12000024	// 12000024, wbregs names: PWRCOUNT
#define	R_PWRCOUNT        	0x12000024	// 12000024, wbregs names: PWRCOUNT
#define	R_SPIO            	0x12000028	// 12000028, wbregs names: SPIO
#define	R_SPIO            	0x12000028	// 12000028, wbregs names: SPIO
// SYSCLK Clock Counter (measures clock speed)
#define	R_SYSCLK          	0x1200002c	// 1200002c, wbregs names: SYSCLK
// SYSCLK Clock Counter (measures clock speed)
#define	R_SYSCLK          	0x1200002c	// 1200002c, wbregs names: SYSCLK
#define	R_VERSION         	0x12000030	// 12000030, wbregs names: VERSION
#define	R_VERSION         	0x12000030	// 12000030, wbregs names: VERSION
// FPGA CONFIG REGISTERS: 0x4e0-0x4ff
#define	R_CFG_CRC         	0x14000000	// 14000000, wbregs names: FPGACRC
#define	R_CFG_FAR         	0x14000004	// 14000000, wbregs names: FPGAFAR
#define	R_CFG_FDRI        	0x14000008	// 14000000, wbregs names: FPGAFDRI
#define	R_CFG_FDRO        	0x1400000c	// 14000000, wbregs names: FPGAFDRO
#define	R_CFG_CMD         	0x14000010	// 14000000, wbregs names: FPGACMD
#define	R_CFG_CTL0        	0x14000014	// 14000000, wbregs names: FPGACTL0
#define	R_CFG_MASK        	0x14000018	// 14000000, wbregs names: FPGAMASK
#define	R_CFG_STAT        	0x1400001c	// 14000000, wbregs names: FPGASTAT
#define	R_CFG_LOUT        	0x14000020	// 14000000, wbregs names: FPGALOUT
#define	R_CFG_COR0        	0x14000024	// 14000000, wbregs names: FPGACOR0
#define	R_CFG_MFWR        	0x14000028	// 14000000, wbregs names: FPGAMFWR
#define	R_CFG_CBC         	0x1400002c	// 14000000, wbregs names: FPGACBC
#define	R_CFG_IDCODE      	0x14000030	// 14000000, wbregs names: FPGAIDCODE
#define	R_CFG_AXSS        	0x14000034	// 14000000, wbregs names: FPGAAXSS
#define	R_CFG_COR1        	0x14000038	// 14000000, wbregs names: FPGACOR1
#define	R_CFG_WBSTAR      	0x14000040	// 14000000, wbregs names: WBSTAR
#define	R_CFG_TIMER       	0x14000044	// 14000000, wbregs names: CFGTIMER
#define	R_CFG_BOOTSTS     	0x14000058	// 14000000, wbregs names: BOOTSTS
#define	R_CFG_CTL1        	0x14000060	// 14000000, wbregs names: FPGACTL1
#define	R_CFG_BSPI        	0x1400007c	// 14000000, wbregs names: FPGABSPI
// Ethernet configuration (MDIO) port
#define	R_MDIO_BMCR       	0x16000000	// 16000000, wbregs names: BMCR
#define	R_MDIO_BMSR       	0x16000004	// 16000000, wbregs names: BMSR
#define	R_MDIO_PHYIDR1    	0x16000008	// 16000000, wbregs names: PHYIDR1
#define	R_MDIO_PHYIDR2    	0x1600000c	// 16000000, wbregs names: PHYIDR2
#define	R_MDIO_ANAR       	0x16000010	// 16000000, wbregs names: ANAR
#define	R_MDIO_ANLPAR     	0x16000014	// 16000000, wbregs names: ANLPAR
#define	R_MDIO_ANER       	0x16000018	// 16000000, wbregs names: ANER
#define	R_MDIO_ANNPTR     	0x1600001c	// 16000000, wbregs names: ANNPTR
#define	R_MDIO_PHYSTS     	0x16000040	// 16000000, wbregs names: PHYSYTS
#define	R_MDIO_FCSCR      	0x16000050	// 16000000, wbregs names: FCSCR
#define	R_MDIO_RECR       	0x16000054	// 16000000, wbregs names: RECR
#define	R_MDIO_PCSR       	0x16000058	// 16000000, wbregs names: PCSR
#define	R_MDIO_RBR        	0x1600005c	// 16000000, wbregs names: RBR
#define	R_MDIO_LEDCR      	0x16000060	// 16000000, wbregs names: LEDCR
#define	R_MDIO_PHYCR      	0x16000064	// 16000000, wbregs names: PHYCR
#define	R_MDIO_BTSCR      	0x16000068	// 16000000, wbregs names: BTSCR
#define	R_MDIO_CDCTRL     	0x1600006c	// 16000000, wbregs names: CDCTRL
#define	R_MDIO_EDCR       	0x16000074	// 16000000, wbregs names: EDCR
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA       	0x18000000	// 18000000, wbregs names: ALPHA
#define	R_GPS_BETA        	0x18000004	// 18000000, wbregs names: BETA
#define	R_GPS_GAMMA       	0x18000008	// 18000000, wbregs names: GAMMA
#define	R_GPS_STEP        	0x1800000c	// 18000000, wbregs names: STEP
// GPS clock tracker, control loop settings registers
#define	R_GPS_ALPHA       	0x18000000	// 18000000, wbregs names: ALPHA
#define	R_GPS_BETA        	0x18000004	// 18000000, wbregs names: BETA
#define	R_GPS_GAMMA       	0x18000008	// 18000000, wbregs names: GAMMA
#define	R_GPS_STEP        	0x1800000c	// 18000000, wbregs names: STEP
#define	R_MOUSE_STAT      	0x18000020	// 18000020, wbregs names: MSTAT
#define	R_MOUSE_RAW       	0x18000024	// 18000020, wbregs names: MRAW
#define	R_SCRN_MOUSE      	0x18000028	// 18000020, wbregs names: MOUSE
#define	R_SCRN_SIZE       	0x1800002c	// 18000020, wbregs names: MSIZ
#define	R_MOUSE_STAT      	0x18000020	// 18000020, wbregs names: MSTAT
#define	R_MOUSE_RAW       	0x18000024	// 18000020, wbregs names: MRAW
#define	R_SCRN_MOUSE      	0x18000028	// 18000020, wbregs names: MOUSE
#define	R_SCRN_SIZE       	0x1800002c	// 18000020, wbregs names: MSIZ
#define	R_OLED_CMD        	0x18000040	// 18000040, wbregs names: OLED
#define	R_OLED_CDATA      	0x18000044	// 18000040, wbregs names: OLEDCA
#define	R_OLED_CDATB      	0x18000048	// 18000040, wbregs names: OLEDCB
#define	R_OLED_DATA       	0x1800004c	// 18000040, wbregs names: ODATA
#define	R_OLED_CMD        	0x18000040	// 18000040, wbregs names: OLED
#define	R_OLED_CDATA      	0x18000044	// 18000040, wbregs names: OLEDCA
#define	R_OLED_CDATB      	0x18000048	// 18000040, wbregs names: OLEDCB
#define	R_OLED_DATA       	0x1800004c	// 18000040, wbregs names: ODATA
// RTC clock registers
#define	R_CLOCK           	0x18000060	// 18000060, wbregs names: CLOCK, TIMER
#define	R_TIMER           	0x18000064	// 18000060, wbregs names: TIMER
#define	R_STOPWATCH       	0x18000068	// 18000060, wbregs names: STOPWATCH
#define	R_CKALARM         	0x1800006c	// 18000060, wbregs names: ALARM, CKALARM
// RTC clock registers
#define	R_CLOCK           	0x18000060	// 18000060, wbregs names: CLOCK, TIMER
#define	R_TIMER           	0x18000064	// 18000060, wbregs names: TIMER
#define	R_STOPWATCH       	0x18000068	// 18000060, wbregs names: STOPWATCH
#define	R_CKALARM         	0x1800006c	// 18000060, wbregs names: ALARM, CKALARM
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ      	0x18000080	// 18000080, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP      	0x18000084	// 18000080, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI     	0x18000088	// 18000080, wbregs names: ERRHI
#define	R_GPSTB_ERRLO     	0x1800008c	// 18000080, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI   	0x18000090	// 18000080, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO   	0x18000094	// 18000080, wbregs names: CNTLO
#define	R_GPSTB_STEPHI    	0x18000098	// 18000080, wbregs names: STEPHI
#define	R_GPSTB_STEPLO    	0x1800009c	// 18000080, wbregs names: STEPLO
// GPS clock test bench registers, for measuring the clock trackers performance
#define	R_GPSTB_FREQ      	0x18000080	// 18000080, wbregs names: GPSFREQ
#define	R_GPSTB_JUMP      	0x18000084	// 18000080, wbregs names: GPSJUMP
#define	R_GPSTB_ERRHI     	0x18000088	// 18000080, wbregs names: ERRHI
#define	R_GPSTB_ERRLO     	0x1800008c	// 18000080, wbregs names: ERRLO
#define	R_GPSTB_COUNTHI   	0x18000090	// 18000080, wbregs names: CNTHI
#define	R_GPSTB_COUNTLO   	0x18000094	// 18000080, wbregs names: CNTLO
#define	R_GPSTB_STEPHI    	0x18000098	// 18000080, wbregs names: STEPHI
#define	R_GPSTB_STEPLO    	0x1800009c	// 18000080, wbregs names: STEPLO
// HDMI in (sink) bit slip control
#define	R_HIN_FRAMEADDR   	0x180000c0	// 180000c0, wbregs names: HINFRAME
#define	R_HIN_ORIGIN      	0x180000c4	// 180000c0, wbregs names: HINORIGIN
#define	R_HIN_MAXSZ       	0x180000c8	// 180000c0, wbregs names: HINMAXSZ
#define	R_HIN_BYTESPLINE  	0x180000cc	// 180000c0, wbregs names: HINBYTESPLINE
#define	R_HIN_SYNC_CTRL   	0x180000d0	// 180000c0, wbregs names: HINSYNCC, HINDLY
#define	R_HIN_SLIP        	0x180000d4	// 180000c0, wbregs names: HINSYNCM, HINMANUALSYNC, HINMSYNC, HINSLIP
#define	R_HIN_SYNC_DATA   	0x180000d8	// 180000c0, wbregs names: HINSYNCD, HINSYNCDATA, HINSYNC
#define	R_HIN_SYNCQ       	0x180000dc	// 180000c0, wbregs names: HINSYNCQ
#define	R_HIN_CKWORD      	0x180000e0	// 180000c0, wbregs names: HINCW, HINCKWORD, HINPIXCLK
#define	R_HIN_COLUMNS     	0x180000f0	// 180000c0, wbregs names: HINCOLS
#define	R_HIN_ROWS        	0x180000f4	// 180000c0, wbregs names: HINROWS
#define	R_HIN_HMODE       	0x180000f8	// 180000c0, wbregs names: HINHMODE
#define	R_HIN_VMODE       	0x180000fc	// 180000c0, wbregs names: HINVMODE
// HDMI in (sink) bit slip control
#define	R_HIN_FRAMEADDR   	0x180000c0	// 180000c0, wbregs names: HINFRAME
#define	R_HIN_ORIGIN      	0x180000c4	// 180000c0, wbregs names: HINORIGIN
#define	R_HIN_MAXSZ       	0x180000c8	// 180000c0, wbregs names: HINMAXSZ
#define	R_HIN_BYTESPLINE  	0x180000cc	// 180000c0, wbregs names: HINBYTESPLINE
#define	R_HIN_SYNC_CTRL   	0x180000d0	// 180000c0, wbregs names: HINSYNCC, HINDLY
#define	R_HIN_SLIP        	0x180000d4	// 180000c0, wbregs names: HINSYNCM, HINMANUALSYNC, HINMSYNC, HINSLIP
#define	R_HIN_SYNC_DATA   	0x180000d8	// 180000c0, wbregs names: HINSYNCD, HINSYNCDATA, HINSYNC
#define	R_HIN_SYNCQ       	0x180000dc	// 180000c0, wbregs names: HINSYNCQ
#define	R_HIN_CKWORD      	0x180000e0	// 180000c0, wbregs names: HINCW, HINCKWORD, HINPIXCLK
#define	R_HIN_COLUMNS     	0x180000f0	// 180000c0, wbregs names: HINCOLS
#define	R_HIN_ROWS        	0x180000f4	// 180000c0, wbregs names: HINROWS
#define	R_HIN_HMODE       	0x180000f8	// 180000c0, wbregs names: HINHMODE
#define	R_HIN_VMODE       	0x180000fc	// 180000c0, wbregs names: HINVMODE
// HDMI EDID for the input HDMI port
#define	R_EDID_IN         	0x18000100	// 18000100, wbregs names: EDIN
// HDMI EDID for the input HDMI port
#define	R_EDID_IN         	0x18000100	// 18000100, wbregs names: EDIN
// HDMI EDID for the output (source) HDMI port
#define	R_EDID_CMD        	0x18000200	// 18000200, wbregs names: EDCMD
#define	R_EDID_SPD        	0x18000204	// 18000200, wbregs names: EDSPD
#define	R_EDID_OUT        	0x18000300	// 18000200, wbregs names: EDOUT
// HDMI EDID for the output (source) HDMI port
#define	R_EDID_CMD        	0x18000200	// 18000200, wbregs names: EDCMD
#define	R_EDID_SPD        	0x18000204	// 18000200, wbregs names: EDSPD
#define	R_EDID_OUT        	0x18000300	// 18000200, wbregs names: EDOUT
#define	R_BKRAM           	0x1a000000	// 1a000000, wbregs names: RAM
#define	R_FLASH           	0x1c000000	// 1c000000, wbregs names: FLASH
#define	R_SDRAM           	0x20000000	// 20000000, wbregs names: SDRAM


//
// The @REGDEFS.H.DEFNS tag
//
// @REGDEFS.H.DEFNS for masters
#define	R_ZIPCTRL	0x40000000
#define	R_ZIPDATA	0x40000004
#define	RESET_ADDRESS	0x1c400000
// @REGDEFS.H.DEFNS for peripherals
#define	SDRAMBASE	0x20000000
#define	SDRAMLEN	0x20000000
// And ... since the SDRAM defines the clock rate
#define	CLKFREQHZ	100000000
#define	BKRAMBASE	0x1a000000
#define	BKRAMLEN	0x00100000
#define	FLASHBASE	0x1c000000
#define	FLASHLEN	0x01000000
#define	FLASHLGLEN	24
// @REGDEFS.H.DEFNS at the top level
// End of definitions from REGDEFS.H.DEFNS
//
// The @REGDEFS.H.INSERT tag
//
// @REGDEFS.H.INSERT for masters

#define	CPU_GO		0x0000
#define	CPU_RESET	0x0040
#define	CPU_INT		0x0080
#define	CPU_STEP	0x0100
#define	CPU_STALL	0x0200
#define	CPU_HALT	0x0400
#define	CPU_CLRCACHE	0x0800
#define	CPU_sR0		0x0000
#define	CPU_sSP		0x000d
#define	CPU_sCC		0x000e
#define	CPU_sPC		0x000f
#define	CPU_uR0		0x0010
#define	CPU_uSP		0x001d
#define	CPU_uCC		0x001e
#define	CPU_uPC		0x001f


// @REGDEFS.H.INSERT for peripherals
// Flash control constants
#define	ERASEFLAG	0x80000000
#define	DISABLEWP	0x10000000
#define	ENABLEWP	0x00000000

#define	SZPAGEB		256
#define	PGLENB		256
#define	SZPAGEW		64
#define	PGLENW		64
#define	NPAGES		256
#define	SECTORSZB	(NPAGES * SZPAGEB)	// In bytes, not words!!
#define	SECTORSZW	(NPAGES * SZPAGEW)	// In words
#define	NSECTORS	64
#define	SECTOROF(A)	((A) & (-1<<16))
#define	SUBSECTOROF(A)	((A) & (-1<<12))
#define	PAGEOF(A)	((A) & (-1<<8))


#define	R_ICONTROL	R_PIC
#define	ISPIF_EN	0x80040004
#define	ISPIF_DIS	0x00040004
#define	ISPIF_CLR	0x00000004
// @REGDEFS.H.INSERT from the top level
typedef	struct {
	unsigned	m_addr;
	const char	*m_name;
} REGNAME;

extern	const	REGNAME	*bregs;
extern	const	int	NREGS;
// #define	NREGS	(sizeof(bregs)/sizeof(bregs[0]))

extern	unsigned	addrdecode(const char *v);
extern	const	char *addrname(const unsigned v);
// End of definitions from REGDEFS.H.INSERT


#endif	// REGDEFS_H
